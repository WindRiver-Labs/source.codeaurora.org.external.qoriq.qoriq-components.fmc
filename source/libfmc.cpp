/* =====================================================================
 *
 *  Copyright 2009, 2010, Freescale Semiconductor, Inc., All Rights Reserved. 
 *
 *  This file contains copyrighted material. Use of this file is restricted
 *  by the provisions of a Freescale Software License Agreement, which has
 *  either accompanied the delivery of this software in shrink wrap
 *  form or been expressly executed between the parties.
 *
 *  File Name : FMC.cpp
 *  Author    : Serge Lamikhov-Center
 *
 * ===================================================================*/

#include <typeinfo>
#include <string.h>
#include <sstream>

#include "fmc.h"
#include "FMCGenericError.h"
#include "FMCTaskDef.h"
#include "FMCPDLReader.h"
#include "FMCPCDReader.h"
#include "FMCCFGReader.h"
#include "FMCPCDModel.h"
#include "FMCCModelOutput.h"
#include "FMCSP.h"

#ifdef _MSC_VER
#pragma warning(disable : 4996)
#ifdef _DEBUG
#pragma comment(linker, "\"/manifestdependency:type='win32' name='Microsoft.VC90.CRT' version='9.0.21022.8' processorArchitecture='x86' publicKeyToken='1fc8b3b9a1e18e3b' language='*'\"")
#endif
#endif


std::string error_text;
std::string compile_dump;

#ifdef __cplusplus
extern "C"
#endif
int fmc_compile(
        fmc_model*   cmodel,
        const char*  nameCfg,
        const char*  namePCD,
        const char*  namePDL,
        const char*  nameSP,
        unsigned int swOffset,
        unsigned int dontWarn,
        const char** dump
)
{
    error_text   = "";
    compile_dump = "";

    try {
        if ( nameSP != 0 && std::string( nameSP ) == "nodefault" ) {
            nameSP = 0;
        }
        if ( namePCD != 0 && std::string( namePCD ) == "nodefault" ) {
            namePCD = 0;
        }
        if ( nameCfg != 0 && std::string( nameCfg ) == "nodefault" ) {
            nameCfg = 0;
        }

        CGenericError::dontWarn = dontWarn;
        
        CTaskDef task;

        // Process PDL and SP files
        CPDLReader pdlReader;
        pdlReader.setTaskData( &task );
        pdlReader.parseNetPDL( namePDL );
        
        // Process custom protocols definition - software parser portion 
        if ( nameSP ) {
            pdlReader.setSoftParse(1);
            pdlReader.parseNetPDL( nameSP );
            bool keepAsm = false;
            softparser(&task, nameSP, keepAsm, swOffset);
        }

        if ( namePCD && nameCfg )
        {
            // Process PCD file
            CPCDReader pcdReader;
            pcdReader.setTaskData( &task );
            pcdReader.parseNetPCD( namePCD );

            // Process config file
            CCFGReader cfgReader;
            cfgReader.setTaskData( &task );
            cfgReader.parseCfgData( nameCfg );

            task.checkSemantics();

            CFMCModel model;
            model.createModel( &task );
            
            CFMCCModelOutput   modelOut;
            std::ostringstream oss;
            modelOut.output( model, cmodel, oss, 0 );

            compile_dump = oss.str();
        }
        
        if ( dump != 0 ) {
            *dump        = compile_dump.c_str();
        }
    }
    catch ( const CGenericError& genError ) { // Catch known errors generated by FMC
        error_text = "Error: " + genError.getErrorMsg();
        return 3;
    }
    catch ( std::exception &e ) 
    {
        error_text  = "Error: ";
        error_text += e.what();
        error_text += " Type : ";
        error_text += typeid( e ).name();
        return 4;
    }
    catch ( ... ) {                     // Catch unknown errors
        error_text = "Error: "
                     "Unrecognized error occured. The program was terminated";
        return 1;
    }

    return 0;
}


#ifdef __cplusplus
extern "C"
#endif
const char* fmc_get_error()
{
    return error_text.c_str();
}
